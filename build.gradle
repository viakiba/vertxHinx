//gradle build -x test -Pserverconfig=dev
buildscript {
    ext {
        kotlinVersion = "1.5.31"
        vertxVersion = "4.1.2"
        zkVersion = "3.12.7"
        neetyVersion = "4.1.66.Final"
        slf4jVersion = "1.7.25"
    }

    dependencies {
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:1.5.31")
    }
}

plugins {
    id 'java'
    id 'org.jetbrains.kotlin.jvm' version "${kotlinVersion}"
    id 'org.jetbrains.kotlin.plugin.allopen' version "${kotlinVersion}"
    id 'org.jetbrains.kotlin.plugin.lombok' version "${kotlinVersion}"
    id 'io.freefair.lombok' version '5.3.0'
}

group = 'com.ohayoo.whitebird'
version = '1.0-SNAPSHOT'
description = 'dogwar'

sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11
java.sourceCompatibility = JavaVersion.VERSION_11
java.targetCompatibility = JavaVersion.VERSION_11
compileKotlin {
    kotlinOptions.jvmTarget = "11"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "11"
}
compileJava.options.encoding = "UTF-8"
compileTestJava.options.encoding = "UTF-8"

def serverconfig = project.hasProperty('serverconfig') ? serverconfig : "dev"

repositories {
    mavenLocal()
    maven {
        url = uri('https://maven.byted.org/repository/public')
    }
    maven {
        url = uri('https://repo.maven.apache.org/maven2/')
    }
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlinVersion}"
    testImplementation "org.jetbrains.kotlin:kotlin-test:${kotlinVersion}"

    implementation "io.vertx:vertx-lang-kotlin:${vertxVersion}"
    implementation "io.vertx:vertx-lang-kotlin-coroutines:${vertxVersion}"
    implementation "io.vertx:vertx-core:${vertxVersion}"
    implementation "io.vertx:vertx-web:${vertxVersion}"
    implementation "io.vertx:vertx-web-client:${vertxVersion}"
    implementation "io.vertx:vertx-zookeeper:${vertxVersion}"
    implementation "io.vertx:vertx-dropwizard-metrics:${vertxVersion}"
    implementation "io.vertx:vertx-mongo-client:${vertxVersion}"
    implementation "io.vertx:vertx-redis-client:${vertxVersion}"
    implementation "io.vertx:vertx-rx-java3:${vertxVersion}"
    implementation "io.vertx:vertx-grpc:${vertxVersion}"
    implementation "io.vertx:vertx-web-templ-thymeleaf:${vertxVersion}"
    implementation "io.vertx:vertx-auth-jwt:${vertxVersion}"

    implementation "org.hibernate.reactive:hibernate-reactive-core:1.0.0.CR8"
    implementation "com.google.guava:guava:30.1.1-jre"
    implementation "com.fasterxml.jackson.core:jackson-databind:2.12.4"
    implementation "com.fasterxml.jackson.core:jackson-core:2.12.4"
    implementation "com.google.protobuf:protobuf-java:3.17.3"
    implementation "com.google.protobuf:protobuf-java-util:3.17.3"
    implementation "com.googlecode.protobuf-java-format:protobuf-java-format:1.4"
    implementation "com.ohayoo.whitebird:common-excel:1.1-SNAPSHOT"
    implementation "com.ohayoo.whitebird:common-hotfix:1.1-SNAPSHOT"
    implementation "com.ohayoo.whitebird:common-game-cloud:1.1-SNAPSHOT"
    implementation ("com.github.l42111996:kcp-base:1.6")
    implementation ("com.github.l42111996:kcp-lockStepSynchronization:1.6")
    implementation ("com.github.l42111996:kcp-fec:1.6")
    implementation ("io.netty.incubator:netty-incubator-codec-quic:0.0.17.Final")
    testImplementation group: 'org.testng', name: 'testng', version: '7.4.0'
}

test.useTestNG()

configurations {
    all*.exclude group: 'log4j', module: 'log4j'
    all*.exclude group: 'org.apache.logging.log4j', module: 'log4j-api'
    all*.exclude group: 'org.apache.logging.log4j', module: 'log4j-to-slf4j'
    all*.exclude group: 'org.slf4j', module: 'slf4j-log4j12'
    all*.exclude group: 'org.slf4j', module: 'slf4j-simple'
    all*.exclude group: 'io.netty', module: 'netty-all'
}

configurations.all {
    resolutionStrategy.cacheChangingModulesFor 1, 'seconds'
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

task buildZip(type: Zip) {
    baseName 'dogwar'
    into('config/cluster') {
        from 'config/cluster'
    }
    into('config/excel') {
        from 'config/excel'
    }
    into('config') {
        from 'config/excel.xml'
    }
    into('config/net') {
        from 'docs/serverconfig/'+serverconfig+"/logic/net/"
    }
    into('config/data') {
        from 'docs/serverconfig/'+serverconfig+"/logic/data/"
    }
    into('config/') {
        from 'docs/serverconfig/'+serverconfig+"/logic/server.json"
    }
    into('config/') {
        from 'docs/serverconfig/'+serverconfig+"/logic/server_logic.properties"
    }
    into('config/') {
        from 'docs/serverconfig/'+serverconfig+"/logic/logback.xml"
    }
    into('lib') {
        from configurations.default
    }
    into('') {
        from configurations.runtime.allArtifacts.files
    }
    into('') {
        from 'docs/shell/'+serverconfig+"/logic.sh"
    }
}

build.dependsOn buildZip