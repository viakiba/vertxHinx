<?xml version="1.0" encoding="UTF-8"?>

<!-- 属性描述 scan：性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true scanPeriod:设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。
	debug:当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。 -->
<configuration
		xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		scan="true" scanPeriod="60 seconds" debug="false">
	<!-- 定义日志文件 输入位置 -->
	<property name="log_dir" value="logs" />
	<!-- 日志最大的历史 30天 -->
	<property name="maxHistory" value="30" />
	<property name="maxFileSize" value="1024MB" />

	<appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
		<encoder>
			<pattern>%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n</pattern>
		</encoder>
	</appender>

	<appender name="ERROR" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<!-- 以下 每个配置的 filter 是过滤掉输出文件里面，会出现高级别文件，依然出现低级别的日志信息，通过filter 过滤只记录本级别的日志 -->
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<level>ERROR</level>
			<onMatch>ACCEPT</onMatch>
			<onMismatch>DENY</onMismatch>
		</filter>
		<encoder><pattern> %d{HH:mm:ss.SSS} %-5level - %msg%n </pattern></encoder>
		<!--滚动策略-->
		<rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
			<!--路径-->
			<fileNamePattern>${log_dir}/error.%d{yyyy-MM-dd}.%i.log</fileNamePattern>
			<maxFileSize>100MB</maxFileSize>
			<totalSizeCap>1GB</totalSizeCap>
			<maxHistory>30</maxHistory>
		</rollingPolicy>
	</appender>

	<appender name="ASYNC-ERROR" class="ch.qos.logback.classic.AsyncAppender">
		<discardingThreshold>0</discardingThreshold>
		<queueSize>256</queueSize>
		<appender-ref ref="ERROR"/>
	</appender>

	<appender name="INFO" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<!-- 以下 每个配置的 filter 是过滤掉输出文件里面，会出现高级别文件，依然出现低级别的日志信息，通过filter 过滤只记录本级别的日志 -->
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<level>INFO</level>
			<onMatch>ACCEPT</onMatch>
			<onMismatch>DENY</onMismatch>
		</filter>
		<encoder>
			<pattern> %d{HH:mm:ss.SSS} %-5level - %msg%n </pattern>
		</encoder>
		<!--滚动策略-->
		<rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
			<!--路径-->
			<fileNamePattern>${log_dir}/info.%d{yyyy-MM-dd}.%i.log</fileNamePattern>
			<maxFileSize>100MB</maxFileSize>
			<totalSizeCap>1GB</totalSizeCap>
			<maxHistory>30</maxHistory>
		</rollingPolicy>
	</appender>

	<appender name="ASYNC-INFO" class="ch.qos.logback.classic.AsyncAppender">
		<!-- 不丢失日志.默认的,如果队列的80%已满,则会丢弃TRACT、DEBUG、INFO级别的日志 -->
		<!-- 更改默认的队列的深度,该值会影响性能.默认值为256 -->
		<!-- 添加附加的appender,最多只能添加一个 -->
		<discardingThreshold>0</discardingThreshold>
		<queueSize>256</queueSize>
		<appender-ref ref="INFO"/>
	</appender>

	<appender name="DEBUG" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<!-- 以下 每个配置的 filter 是过滤掉输出文件里面，会出现高级别文件，依然出现低级别的日志信息，通过filter 过滤只记录本级别的日志 -->
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<level>DEBUG</level>
			<onMatch>ACCEPT</onMatch>
			<onMismatch>DENY</onMismatch>
		</filter>
		<encoder>
			<pattern> %d{HH:mm:ss.SSS} %-5level - %msg%n </pattern>
		</encoder>
		<!--滚动策略-->
		<rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
			<!--路径-->
			<fileNamePattern>${log_dir}/debug.%d{yyyy-MM-dd}.%i.log</fileNamePattern>
			<maxFileSize>100MB</maxFileSize>
			<totalSizeCap>1GB</totalSizeCap>
			<maxHistory>30</maxHistory>
		</rollingPolicy>
	</appender>

	<appender name="ASYNC-DEBUG" class="ch.qos.logback.classic.AsyncAppender">
		<!-- 不丢失日志.默认的,如果队列的80%已满,则会丢弃TRACT、DEBUG、INFO级别的日志 -->
		<!-- 更改默认的队列的深度,该值会影响性能.默认值为256 -->
		<!-- 添加附加的appender,最多只能添加一个 -->
		<discardingThreshold>0</discardingThreshold>
		<queueSize>256</queueSize>
		<appender-ref ref="DEBUG"/>
	</appender>

	<!-- 从高到地低 OFF 、 FATAL 、 ERROR 、 WARN 、 INFO 、 DEBUG 、 TRACE 、 ALL -->
	<!-- 日志输出规则 根据当前ROOT 级别，日志输出时，级别高于root默认的级别时 会输出 -->
	<root level="DEBUG">
		<appender-ref ref="CONSOLE" />
		<appender-ref ref="ASYNC-DEBUG" />
		<appender-ref ref="ASYNC-INFO" />
		<appender-ref ref="ASYNC-ERROR" />
	</root>
</configuration>